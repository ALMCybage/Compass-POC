name: Python Build and Test

on:
  push:
    branches:
      - master  # Customize this to your main branch
#on: 
 # workflow_dispatch
   

jobs:
  build-and-test:
    runs-on: ubuntu-latest #created new one
    env:
      IMAGE_TAG: ${{ github.run_number }}
    environment: staging 

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python and Docker
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
        docker: true

    - name: Create virtual environment
      run: python -m venv venv

    - name: Activate virtual environment
      run: source venv/bin/activate

    - name: Install dependencies
      run: pip install -r requirements.txt  # Adjust this based on your project setup
  
    - name: Install pytest
      run: python -m pip install pytest

    - name: Test with pytest
      run: | 
        python3 manage.py makemigrations
        python3 manage.py migrate  
        python3 manage.py test


    - name: Run Tests and Generate Coverage Report
      run: |
        pip install coverage
        coverage run manage.py test
        pwd
        coverage xml -o coverage-report/coverage.xml
        pwd

    - name: Copy coverage report to project directory
      run: cp coverage-report/coverage.xml ${{ github.workspace }}  


    - name: Stop PostgreSQL service
      run: |
        sudo service postgresql stop || true
        sudo systemctl stop postgresql || true
        
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}  
            
    - run: | 
        docker build -t shreyag123/pythonapp:$IMAGE_TAG .
        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }} https://index.docker.io/v1/
        docker push shreyag123/pythonapp:$IMAGE_TAG

    - run: |
            docker-compose up -d          

    
    - name: Trivy Scan Report
      uses: aquasecurity/trivy-action@master
      with:
          image-ref: 'docker.io/shreyag123/pythonapp:${{ env.IMAGE_TAG }}'
         # format: template
         # template: "@/contrib/html.tpl"
         # output: trivy-report.html     
          output: trivy-report.json
          
    - name: Archive Trivy Report
      uses: actions/upload-artifact@v3
      with:
          name: reports 
          path: trivy-report.json

   
    - name: Send Metrics to Compass
      run: |
         trivy_report=$(cat trivy-report.json)
         metric_value=$(echo "$trivy_report" | jq -r '.[0].Vulnerabilities | length')
         curl --request POST \
          --url https://cybagejanshreya.atlassian.net/gateway/api/compass/v1/metrics \
          --user "$USER_EMAIL:$USER_API_KEY" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data "{ 
         \"metricSourceId\": \"ari:cloud:compass:50eeb54a-bd4a-467a-ae53-532574431702:metric-source/5ec6ba4f-632a-4bd6-81bc-2c0ce8b035bf/50ed8d19-0353-4f17-8d58-863223ac499f\",
         \"value\": $metric_value,
          \"timestamp\": \"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\"
           }"
         echo "Process completed successfully"

      env:
          USER_EMAIL: ${{ secrets.USER_EMAIL }}
          USER_API_KEY: ${{ secrets.USER_API_KEY }}


    - name: Slack Notification
      uses: act10ns/slack@v1
      with:
            status: ${{job.status}}
            steps:  ${{toJson(steps)}}
            channel: 'compass-pythonapp'
            if: always()
      env:
           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}      


           
    
  

        
